#!/bin/bash

config_file=$NRT_WS/.djinn_config
# Refer to the following link for information about state management in bash using a statefile
# https://stackoverflow.com/questions/63084354/how-to-store-state-between-two-consecutive-runs-of-a-bash-script
statefile="/tmp/djinn_state"
last_run_sitl_env=""
# xhost +
echo "WORKSPACE PATH: $NRT_WS"
echo "DJINN MODE: $DJINN_MODE"

save_state () {
  typeset -p "$@" >"$statefile"
}

# Source the statefile to restore state
. "$statefile" 2>/dev/null || :

# Set save_state call on script exit to automatically persist state
# To be enabled later when multiple states are required
# trap 'save_state last_run_sitl_env' EXIT

iexec(){
            time docker container exec -it "$1" /bin/bash -l -c "$2"
        }

iexec_ros(){
			export $(grep -v '^#' $config_file | xargs)
			time docker container exec -it "$1" /bin/bash -l -c "source /opt/ros/${ROS_VERSION}/setup.bash && $2"
        }

iexec_kalibr(){
			time docker container exec -it "$1" /bin/bash -l -c "source /opt/ros/noetic/setup.bash && source \$WORKSPACE/devel/setup.bash && $2"
        }

build_image(){
	# if [[ -z "$(docker images -q $2 2> /dev/null)" ]]
	# then
	# 	if [[ "$(docker manifest inspect $2 > /dev/null 2>&1 && echo yes || echo no)" == "no" ]]
	# 	then
			$NRT_WS/scripts/docker-build.sh $1 $2 $3 $4 
	# 	else
	# 		docker pull $2
	# 	fi
	# fi
}

cd $NRT_WS

if [[ "$1" == "install" ]]
then
	scripts/install.sh $2 $3 $4


elif [[ "$1" == "init" ]]
then
	if [[ ! -d ".ssh" ]]
	then
		read -p "Enter email address for github: " email
		read -p "Enter username for dockerhub: " name
		echo "VERSION=0.0.4" >> $config_file
		echo "ROS_VERSION=\"humble\"" >> $config_file
		echo "userEmail="$email >> $config_file 
		echo "userName="$name >> $config_file 
		if [[ -d "$HOME/.ssh" && ! -L "${HOME}/.ssh" ]]
		then
			cp -r "$HOME/.ssh" $NRT_WS/.ssh
		else
			mkdir .ssh 
			cd .ssh
			ssh-keygen -q -t rsa -C "$email" -N "" -f id_rsa <<<y >/dev/null 2>&1
			cd -
		fi
	fi
	export $(grep -v '^#' $config_file | xargs)
	echo "Github Email: $userEmail"
	echo "Dockerhub ID: $userName"
	if [[ "$2" == "docker" ]]
	then
		platform="linux/amd64,linux/arm64"
		mode="base"
		echo "$3"
		if [[ -n "$3" ]]
		then
			echo "============ BUILDING Image ============="
			if [[ "$3" == "nrt" ]]
			then
				echo "============ BUILDING Base Image ============="
				image="$userName/nrt:base"
				filepath="$NRT_WS/docker/base/"
				build_image $platform $image $filepath
				echo "============ BUILDING ROS Image ============="
				image="$userName/nrt:ros"
				filepath="$NRT_WS/docker/base/ros"
				platform="linux/amd64,linux/arm64"
				build_image $platform $image $filepath 
				echo "============ BUILDING NRT Pangolin Image ============="
				image="$userName/nrt:pangolin"
				filepath="$NRT_WS/docker/nrt/pangolin"
				platform="linux/amd64,linux/arm64"
				build_image $platform $image $filepath 
				echo "============ BUILDING NRT VERSION:$VERSION Image ============="
				image="$userName/nrt:$VERSION"
				filepath="$NRT_WS/docker/nrt/camera"
				platform="linux/amd64,linux/arm64"
				container_name="nrt_container"
				build_image $platform $image $filepath 
				source $NRT_WS/scripts/start.sh "$NRT_WS" "$container_name" "$image"
                iexec nrt_container "ls && echo \"Starting Container Setup\" && /ws/scripts/docker-setup.sh $3 $userEmail $userName"
			elif [[ "$3" == "kalibr" ]]
			then
				echo "============ BUILDING Kalibr Image ============="
				image="$userName/nrt:kalibr"
				filepath="$NRT_WS/ext/calibration/kalibr/"
				container_name="kalibr_container"
				mode="kalibr"
				build_image $platform $image $filepath "NRT_WS=$NRT_WS"
			fi
		fi
	fi

elif [[ "$1" == "up" ]]
then
	mode="ros"
	export $(grep -v '^#' $config_file | xargs)
	echo "username: $userName"
	echo "email: $userEmail"
	# git submodule update --init --recursive
	if [[ -n "$2" ]]
	then
		
		if [[ "$2" == "nrt"  ]]
		then
			echo "=============== Initialising NRT Base Container ================"
			source $NRT_WS/scripts/start.sh $NRT_WS nrt_container shandilya1998/nrt:$VERSION
			iexec_ros nrt_container "ls && echo \"Starting Container Setup\" && /ws/scripts/docker-setup.sh $2 $userEmail $userName" 
			iexec_ros nrt_container "/ws/scripts/build_ros_packages.sh"
		elif [[ "$2" == "kalibr" ]]
		then
			echo "============ Initialising Kalibr Container ============="
			source $NRT_WS/scripts/start.sh $NRT_WS kalibr_container shandilya1998/nrt:kalibr
		fi
	else
		source $NRT_WS/scripts/start.sh $NRT_WS nrt_container shandilya1998/nrt:$VERSION
		iexec_ros nrt_container "ls && echo \"Starting Container Setup\" && /ws/scripts/docker-setup.sh $2 $userEmail $userName" 
		iexec_ros nrt_container "./scripts/build.sh && ./scripts/build_ros_packages.sh && cd ros_ws && source install/local_setup.bash && cd .."
	fi

elif [[ "$1" == "build" ]]
then	
	clear
	if [[ -z "$2" ]]
	then
		echo "=========== BUILDING NRT And related Packages ==========="
		
		iexec_ros nrt_container "./scripts/build.sh && ./scripts/build_ros_packages.sh && cd ros_ws && source install/local_setup.bash && cd .."
	else
		if [[  "$2" == "nrt" ]]
		then
			echo "=========== BUILDING Packages ==========="
			echo $PWD
			iexec_ros nrt_container "./scripts/build_ros_packages.sh"
		elif [[ "$2" == "docker" ]]
		then
			platform="linux/amd64,linux/arm64"
			image="$3"
			filepath="$4"
			# build_image $platform $image $filepath "NRT_WS=$NRT_WS"
			source $NRT_WS/scripts/docker-build.sh $platform $image $filepath "NRT_WS=$NRT_WS" 
		fi
	fi

elif [[  "$1" == "exec" ]]
then
	# djinn exec "cd ros_ws/src/ && ros2 pkg create --build-type ament_cmake Sensors" for creating ros2 packages
	# echo "${2}_container"
	if [[ "$2" == "nrt" ]]
	then
		iexec_ros "${2}_container" $3
	else
		iexec "${2}_container" "$3"
	fi

elif [[  "$1" == "start" ]]
then
	if [[ "$2" == "tello" ]]
	then
		iexec_ros nrt_container "source /ws/ros_ws/install/setup.bash && ros2 launch controllers tello_launch.py"
	elif [[ "$2" == "tello-orbslam3" ]]
	then
		iexec_ros nrt_container "source /ws/ros_ws/install/setup.bash && ros2 launch controllers tello_orbslam3_mono_launch.py"
	fi

elif [[ $1 == "kill" ]]
then
	echo "Killing running proceses"
	if [[ "$2" == "sitl" ]]
	then
		echo "Killing SITL processes"
		iexec sitl_container "ps -eawf | grep NRT | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		# ps -ef | grep QGroundControl | grep -v grep | awk '{print $2}' | xargs -r kill -9
		if [[ ! -z "$last_run_sitl_env"  ]]
		then
			ps -eawf | grep "$last_run_sitl_env" | grep -v grep | awk '{print $2}' | xargs -r kill -9
		fi
		echo "Done Killing SITL processes"
	elif [[ $2 == "airsim" ]]
	then
		if [[ ! -z "$last_run_sitl_env"  ]]
		then
			ps -eawf | grep "$last_run_sitl_env" | grep -v grep | awk '{print $2}' | xargs -r kill -9
		fi
		iexec nrt_container "ps -eawf | grep airsim_lib | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
	elif [[ "$2" == "gqc" ]]
	then
		ps -ef | grep QGroundControl | grep -v grep | awk '{print $2}' | xargs -r kill -9
	fi

elif [[ "$1" == "down" ]]
then
	if [[ -n "$2" ]]
	then
		docker stop "${2}_container"
	else
		docker stop base_container nrt_container sitl_container vision_tools_container bfx_container
	fi

elif [[ "$1" == "rmi" ]]
then
	if [[ -n "$2" ]]
	then
		if [[ "$2" == "all" ]]
		then
			docker images | grep -v grep |  tail -n +2 |  awk '{print $3}'  | xargs -r docker rmi -f
		else
			docker rmi -f "$2"
		fi
	fi

elif [[ "$1" == "ps" ]]
then
	docker ps

elif [[ "$1" == "search" ]]
then
	grep -inr --include \*.h \
		--include \*.cpp \
		--include \*.hpp \
		--include \*.py \
		--include \*CMakeLists.txt \
		--include \*.sh \
		--include \*package.xml "$2" \
		--include $NRT_WS/djinn	-e "$3"
fi
